# Begin Function AIR: test.continue in for loop:
# Total AIR+Liveness bytes: 1.7998046875KiB
# AIR Instructions:         111 (999B)
# AIR Extra Data:           79 (316B)
# AIR Values Bytes:         36 (288B)
# Liveness tomb_bits:       56B
# Liveness Extra Data:      12 (48B)
# Liveness special table:   3 (24B)
  %1 = const_ty((inferred_alloc_const))
  %3 = constant(comptime_int, 5)
  %4 = constant(usize, 5)
  %5 = const_ty([5]i32)
  %6 = const_ty([5]i32)
  %8 = const_ty(*[5]i32)
  %10 = constant(usize, 0)
  %11 = const_ty(*i32)
  %13 = constant(i32, 1)
  %15 = constant(usize, 1)
  %16 = const_ty(*i32)
  %18 = constant(comptime_int, 2)
  %19 = constant(i32, 2)
  %21 = constant(usize, 2)
  %22 = const_ty(*i32)
  %24 = constant(comptime_int, 3)
  %25 = constant(i32, 3)
  %27 = constant(usize, 3)
  %28 = const_ty(*i32)
  %30 = constant(comptime_int, 4)
  %31 = constant(i32, 4)
  %33 = constant(usize, 4)
  %34 = const_ty(*i32)
  %36 = constant(comptime_int, 5)
  %37 = constant(i32, 5)
  %41 = constant(i32, 0)
  %44 = const_ty([5]i32)
  %46 = constant(comptime_int, 5)
  %53 = const_ty(u64)
  %55 = const_ty(u64)
  %56 = constant(u64, 5)
  %65 = constant(comptime_int, 3)
  %66 = const_ty(i32)
  %67 = constant(i32, 3)
  %83 = constant(comptime_int, 6)
  %84 = const_ty(i32)
  %85 = constant(i32, 6)
  %87 = const_ty(*const [24]u8)
  %88 = constant(*const [24]u8, (decl ref))
  %89 = constant([]const u8, (slice))
  %90 = const_ty(*const type)
  %91 = constant(*const type, (decl ref))
  %92 = constant(type, builtin.builtin)
  %93 = const_ty(*const *const fn([]const u8, ?*builtin.StackTrace) callconv(.Unspecified) noreturn)
  %94 = constant(*const *const fn([]const u8, ?*builtin.StackTrace) callconv(.Unspecified) noreturn, (decl ref))
  %95 = const_ty(*const fn([]const u8, ?*builtin.StackTrace) callconv(.Unspecified) noreturn)
  %96 = constant(*const fn([]const u8, ?*builtin.StackTrace) callconv(.Unspecified) noreturn, (decl ref))
  %97 = const_ty(*const type)
  %98 = constant(*const type, (decl ref))
  %99 = constant(type, builtin.builtin)
  %100 = const_ty(*const type)
  %101 = constant(*const type, (decl ref))
  %102 = constant(type, builtin.StackTrace)
  %103 = const_ty(?*builtin.StackTrace)
  %104 = constant(?*builtin.StackTrace, null)
  %108 = const_ty((inferred error set of test.continue in for loop)!void)
  %109 = constant((inferred error set of test.continue in for loop)!void, (eu_payload) {})

  %0!= dbg_stmt(2:5)
  %2 = alloc(*[5]i32)
  %9 = bitcast(*[5]i32, %2)
  %12 = ptr_elem_ptr(%9, %10!)
  %14!= store(%12!, %13!)
  %17 = ptr_elem_ptr(%9, %15!)
  %20!= store(%17!, %19!)
  %23 = ptr_elem_ptr(%9, %21!)
  %26!= store(%23!, %25!)
  %29 = ptr_elem_ptr(%9, %27!)
  %32!= store(%29!, %31!)
  %35 = ptr_elem_ptr(%9!, %33!)
  %38!= store(%35!, %37!)
  %39!= dbg_stmt(3:5)
  %40 = alloc(*i32)
  %42!= store(%40, %41!)
  %43!= dbg_stmt(4:5)
  %45 = load([5]i32, %2!)
  %47 = alloc(*usize)
  %48!= store(%47, @Ref.zero_usize)
  %49!= block(void, {
    %50 = loop(noreturn, {
      %51!= block(void, {
        %52 = load(usize, %47)
        %54 = intcast(u64, %52)
        %57 = cmp_lt(%54!, %56!)
        %76!= cond_br(%57!, {
          %58 = array_elem_val(%45!, %52!)
          %59!= dbg_stmt(5:9)
          %60 = load(i32, %40)
          %61 = add(%60!, %58)
          %62!= store(%40, %61!)
          %63!= dbg_stmt(6:9)
          %64!= block(void, {
            %68 = cmp_lt(%58!, %67!)
            %72!= cond_br(%68!, {
              %69!= dbg_stmt(7:13)
              %70!= br(%51, @Ref.void_value)
            }, {
              %71!= br(%64, @Ref.void_value)
            })
          })
          %73!= dbg_stmt(9:9)
          %74!= br(%49, @Ref.void_value)
        }, {
          %67! %52! %45!
          %75!= br(%49, @Ref.void_value)
        })
      })
      %77 = load(usize, %47)
      %78 = add(%77!, @Ref.one_usize)
      %79!= store(%47!, %78!)
    })
  })
  %80!= dbg_stmt(11:5)
  %81!= block(void, {
    %82 = load(i32, %40!)
    %86 = cmp_neq(%82!, %85!)
    %107!= cond_br(%86!, {
      %105!= call(%96!, [%89!, %104!])
    }, {
      %96! %89! %104!
      %106!= br(%81, @Ref.void_value)
    })
  })
  %110!= ret(%109!)
# End Function AIR: test.continue in for loop
